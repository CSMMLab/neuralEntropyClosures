'''
small script to plot cpp output
'''

import csv

from mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import
import matplotlib.pyplot as plt
from matplotlib  import cm
import numpy as np


plt.style.use("kitish")


def createTrainingData(filename, inputDim):
    # Loads the training data generated by "generateTrainingData.py"


    # Load Alpha
    f = open(filename, 'r')
    alphaList = list()
    uList = list()
    hList = list()
    with f:
        reader = csv.reader(f)
        for row in reader:
            numRowU = []
            numRowAlpha = []
            numRowH = []
            word_idx = 0
            for word in row:
                # skip first index, which is date and time info
                if word_idx > 0 and word_idx < inputDim + 1:  # hardcoded... careful
                    numRowU.append(float(word))
                if word_idx > inputDim and word_idx < 2 * inputDim + 1:
                    numRowAlpha.append(float(word))
                if word_idx == 2 * inputDim + 1:
                    numRowH.append(float(word))
                word_idx = word_idx + 1
            uList.append(numRowU)
            alphaList.append(numRowAlpha)
            hList.append(numRowH)

    print("Data loaded")
    return  (np.asarray(uList), np.asarray(alphaList), np.asarray(hList))

def plotHoverU(u,h):
    '''
    Plot h over relative moments corresponding to Monreals diss
    '''

    # Fixing random state for reproducibility
    np.random.seed(19680801)

    def randrange(n, vmin, vmax):
        '''
        Helper function to make an array of random numbers having shape (n, )
        with each number distributed Uniform(vmin, vmax).
        '''
        return (vmax - vmin) * np.random.rand(n) + vmin

    fig = plt.figure()
    ax = fig.add_subplot(111)#, projection='3d')
    ax.grid(True, linestyle='-', color='0.75')
    x = u[:,1]
    y = u[:,2]
    z = h
    out = ax.scatter(x, y, s=20, c=z, cmap=cm.jet);

    ax.set_title("h over N1 and N2", fontsize=14)
    ax.set_xlabel("N1", fontsize=12)
    ax.set_ylabel("N2", fontsize=12)
    #ax.set_xlabel('N1')
    #ax.set_ylabel('N2')
    #ax.set_zlabel('h')
    #pos_neg_clipped = ax.imshow(z)
    cbar = fig.colorbar(out, ax=ax, extend='both')
    plt.show()

    return 0

def plotHoverU2(u, h):
    x = u[:, 1]
    y = u[:, 2]
    z = h

    xx, yy = np.meshgrid(x, y, sparse=True)
    z = np.sin(xx ** 2 + yy ** 2) / (xx ** 2 + yy ** 2)

    fig = plt.contourf(x, y, z)

    plt.show()



def main():
    (u,alpha,h) = createTrainingData("data/1_stage/Monomial_M2_D1.csv", 3)

    plotHoverU(u,h)

    print(u)
    return 0


if __name__ == '__main__':
    main()

